{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource, type ComputedFields } from \"@contentlayer/source-files\";\nimport { remarkCodeHike } from \"@code-hike/mdx\";\nimport { createRequire } from \"module\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings, { type Options as AutolinkOptions } from 'rehype-autolink-headings';\nconst require = createRequire(import.meta.url);\nconst theme = require(\"shiki/themes/nord.json\");\n\nconst computedFields: ComputedFields = {\n    slug: {\n        type: 'string',\n        resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n    }\n}\n\nexport const Article = defineDocumentType(() => ({\n    name: 'Article',\n    filePathPattern: `articles/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: { type: 'string', required: true },\n        date: { type: 'date', required: true },\n        image: { type: 'string', required: false, default: '' },\n        excerpt: { type: 'string', required: false, default: \"No excerpt provided\" },\n        tags: { type: 'list', of: { type: 'string' }, required: false },\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (article) => `/${article._raw.flattenedPath}`\n        },\n        image: {\n            type: 'string',\n            resolve: (article) => article.image = article.image + \"?r=\" + Math.random(),\n        },\n        ...computedFields,\n    },\n}))\n\nexport const Page = defineDocumentType(() => ({\n    name: 'Page',\n    filePathPattern: `pages/**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: { type: 'string', required: true },\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (page) => `/${page._raw.flattenedPath}`\n        },\n        ...computedFields,\n    }\n}))\n\n// @ts-ignore\nexport default makeSource({\n    contentDirPath: './content',\n    documentTypes: [Article, Page],\n    mdx: {\n        remarkPlugins: [\n            remarkGfm,\n            [remarkCodeHike,\n                {\n                    showCopyButton: true,\n                    theme: theme,\n                    lineNumbers: true,\n                }\n            ]\n        ],\n        rehypePlugins: [\n            rehypeSlug,\n            [\n                rehypeAutolinkHeadings,\n                {\n                    behavior: 'append',\n                    test: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n                    content: {\n                        type: 'element',\n                        tagName: 'svg',\n                        properties: {\n                            style: 'display: inline-block; height: 0.8em; width: 0.8em; margin: 0.25rem; opacity: 0.6;',\n                            className: ['text-primary_color', 'dark:text-primary_color-dark'],\n                            xmlns: 'http://www.w3.org/2000/svg',\n                            fill: 'none',\n                            viewBox: '0 0 24 24',\n                            strokeWidth: '1.5',\n                            stroke: 'currentColor'\n                        },\n                        children: [\n                            {\n                                type: 'element',\n                                tagName: 'path',\n                                properties: {\n                                    strokeLinecap: 'round',\n                                    strokeLinejoin: 'round',\n                                    d: 'M5.25 8.25h15m-16.5 7.5h15m-1.8-13.5l-3.9 19.5m-2.1-19.5l-3.9 19.5'\n                                },\n                                children: []\n                            }\n                        ]\n                    }\n                } satisfies Partial<AutolinkOptions>,\n            ]\n        ]\n    }\n})\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAuC;AACpE,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB;AAC9B,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,OAAO,4BAAiE;AACxE,IAAMA,WAAU,cAAc,YAAY,GAAG;AAC7C,IAAM,QAAQA,SAAQ,wBAAwB;AAE9C,IAAM,iBAAiC;AAAA,EACnC,MAAM;AAAA,IACF,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACzE;AACJ;AAEO,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC7C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,OAAO,EAAE,MAAM,UAAU,UAAU,OAAO,SAAS,GAAG;AAAA,IACtD,SAAS,EAAE,MAAM,UAAU,UAAU,OAAO,SAAS,sBAAsB;AAAA,IAC3E,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,EAClE;AAAA,EACA,gBAAgB;AAAA,IACZ,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,CAAC,YAAY,IAAI,QAAQ,KAAK;AAAA,IAC3C;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,YAAY,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,KAAK,OAAO;AAAA,IAC9E;AAAA,IACA,GAAG;AAAA,EACP;AACJ,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC1C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EAC5C;AAAA,EACA,gBAAgB;AAAA,IACZ,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,IAAI,KAAK,KAAK;AAAA,IACrC;AAAA,IACA,GAAG;AAAA,EACP;AACJ,EAAE;AAGF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,SAAS,IAAI;AAAA,EAC7B,KAAK;AAAA,IACD,eAAe;AAAA,MACX;AAAA,MACA;AAAA,QAAC;AAAA,QACG;AAAA,UACI,gBAAgB;AAAA,UAChB;AAAA,UACA,aAAa;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,eAAe;AAAA,MACX;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,UACI,UAAU;AAAA,UACV,MAAM,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AAAA,UACzC,SAAS;AAAA,YACL,MAAM;AAAA,YACN,SAAS;AAAA,YACT,YAAY;AAAA,cACR,OAAO;AAAA,cACP,WAAW,CAAC,sBAAsB,8BAA8B;AAAA,cAChE,OAAO;AAAA,cACP,MAAM;AAAA,cACN,SAAS;AAAA,cACT,aAAa;AAAA,cACb,QAAQ;AAAA,YACZ;AAAA,YACA,UAAU;AAAA,cACN;AAAA,gBACI,MAAM;AAAA,gBACN,SAAS;AAAA,gBACT,YAAY;AAAA,kBACR,eAAe;AAAA,kBACf,gBAAgB;AAAA,kBAChB,GAAG;AAAA,gBACP;AAAA,gBACA,UAAU,CAAC;AAAA,cACf;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;",
  "names": ["require"]
}
